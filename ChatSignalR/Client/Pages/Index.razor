@page "/"
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<PageTitle>Online Chat</PageTitle>
<h3>Online Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="userName" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <label>@onlineUsers User(s) online</label>
    <textarea style="width:100%; height: 500px;" @ref="TextAreaRef" disabled>
        @messages
            </textarea>
    <div class="input-group">
        <input @bind-value="message"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           class="form-control">
        <button class="btn btn-primary form-control-append"
            @onclick="Send"
            disabled="@(!IsConnected || string.IsNullOrWhiteSpace(message))">
            Send
        </button>
    </div>

}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string userName = string.Empty;
    private string message = string.Empty;
    private int onlineUsers = 0;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={userName}"))
                            .Build();

        hubConnection.On<string, string, int>("ReceiveMessage", (user, message, totalOnlineUsers) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            onlineUsers = totalOnlineUsers;
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", userName, message.Trim());
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter") && !string.IsNullOrWhiteSpace(message))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
